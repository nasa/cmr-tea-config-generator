service: tea-config-generator

frameworkVersion: '2 || 3'

variablesResolutionMode: 20210326

provider:
  name: aws
  runtime: python3.8
  memorySize: 128 # default was 1024, 512 would also be accepted
  region: us-east-1
  role: IamRoleTeaLambdaExecution
  environment:
    AWS_TEA_CONFIG_CMR: ${env:AWS_TEA_CONFIG_CMR, 'https://cmr.earthdata.nasa.gov'}
    AWS_TEA_CONFIG_LOG_LEVEL: ${env:AWS_TEA_CONFIG_LOG, 'INFO'}
  stage: ${opt:stage, 'prod'}

package:
  exclude:
    - node_modules/**

functions:
  capabilities:
    handler: capabilities.capabilities
    description: Return a summary of the calls that can be made to this application
    timeout: 5
    events:
      - alb:
          listenerArn: ${cf:${self:provider.stage}.servicesLbListenerArn}
          priority: 999
          conditions:
            path:
              - ${self:custom.endPoint}/capabilities
              - ${self:custom.endPoint}/
    vpc: ~
  status:
    handler: handler.health
    description: Return a nominal response for confirming the status of this app
    timeout: 5
    events:
      - alb:
          listenerArn: ${cf:${self:provider.stage}.servicesLbListenerArn}
          priority: 998
          conditions:
            path: ${self:custom.endPoint}/status
    vpc: ~
  provider:
    handler: handler.generate_tea_config
    description: Generate a TEA Config YAML file
    timeout: 30
    events:
      - alb:
          listenerArn: ${cf:${self:provider.stage}.servicesLbListenerArn}
          priority: 997
          conditions:
            path: ${self:custom.endPoint}/provider*
    vpc:
      securityGroupIds:
        - ${cf:${self:provider.stage}.servicesSecurityGroupId}
      subnetIds: !Split [',', '${cf:${self:provider.stage}.subnetIds}']

resources:
  Resources:
    # this property will not work locally till the following is fixed:
    # https://github.com/dherault/serverless-offline/issues/1278
    IamRoleTeaLambdaExecution:
      Type: AWS::IAM::Role
      Properties:
        RoleName: tea-config-generator-role-${self:provider.stage}-${self:provider.region}
        PermissionsBoundary: arn:aws:iam::${aws:accountId}:policy/NGAPShRoleBoundary
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-s3-local
custom:
  endPoint: /configuration/tea
  pythonRequirements:
    pythonBin: /usr/bin/python3
